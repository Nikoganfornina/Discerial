package org.example.discerial.Controladores;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.util.Duration;
import org.example.discerial.DAO.IEstadoUsuarioImpl;
import org.example.discerial.DAO.IPreguntaImpl;
import org.example.discerial.DAO.IusuariosImpl;
import org.example.discerial.Util.MusicManager;
import org.example.discerial.entities.EstadoUsuario;
import org.example.discerial.entities.Pregunta;
import org.example.discerial.entities.Usuarios;

import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class VistaPreguntaController {

    @FXML private AnchorPane rootPane;
    @FXML private Label lblCategoria, lblPregunta, lblTimer;
    @FXML private Label lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4;
    @FXML private HBox hboxNav;
    @FXML private Button btnAnterior, btnSiguiente;
    @FXML private Label lblCountTest;

    private List<Pregunta> listaPreguntas;
    private int indiceActual = 0;

    private Timeline timer;
    private int timeRemaining = 20;

    private final IusuariosImpl usuarioDao = new IusuariosImpl();
    private Usuarios usuarioActual;

    private final MusicManager musicManager = MusicManager.getInstance();

    @FXML
    public void initialize() {
        usuarioActual = usuarioDao.currentUser();
        musicManager.playAmbientMusic();
        setupTimer();

        List<Pregunta> todasLasPreguntas = new IPreguntaImpl().findAll();
        Collections.shuffle(todasLasPreguntas);
        listaPreguntas = todasLasPreguntas.stream().limit(10).collect(Collectors.toList());

        if (!listaPreguntas.isEmpty()) {
            indiceActual = 0;
            mostrarPregunta();
        }
        hboxNav.setVisible(false);
    }

    private void actualizarContadorPregunta() {
        int total = listaPreguntas.size();
        int actual = indiceActual + 1; // +1 porque los índices empiezan en 0
        lblCountTest.setText(actual + "/" + total);
    }

    private void setupTimer() {
        timer = new Timeline(new KeyFrame(Duration.seconds(1), e -> {
            timeRemaining--;
            lblTimer.setText("Tiempo: " + timeRemaining + "s");
            if (timeRemaining <= 0) {
                timer.stop();
                saveAttempt(false);
                highlightCorrect();
                hboxNav.setVisible(true);
                deshabilitarOpciones(true);
            }
        }));
        timer.setCycleCount(Timeline.INDEFINITE);
    }

    private void resetTimer() {
        timer.stop();
        timeRemaining = 20;
        lblTimer.setText("Tiempo: " + timeRemaining + "s");
        timer.playFromStart();
    }

    private void mostrarPregunta() {
        if (listaPreguntas.isEmpty() || indiceActual < 0 || indiceActual >= listaPreguntas.size()) return;

        hboxNav.setVisible(false);
        deshabilitarOpciones(false);
        clearStyles();

        Pregunta p = listaPreguntas.get(indiceActual);

        lblCategoria.setText("Categoría: " + p.getCategoria().getNombre());
        lblPregunta.setText(p.getPregunta());

        // Generar opciones aleatorias
        class Opcion {
            String text;
            boolean correct;
            Opcion(String text, boolean correct) { this.text = text; this.correct = correct; }
        }

        List<Opcion> opciones = List.of(
                new Opcion(p.getRespuestaCorrecta(), true),
                new Opcion(p.getRespuesta2(), false),
                new Opcion(p.getRespuesta3(), false),
                new Opcion(p.getRespuesta4(), false)
        ).stream().filter(o -> o.text != null && !o.text.isBlank()).collect(Collectors.toList());

        Collections.shuffle(opciones);

        Label[] labels = {lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4};
        for (int i = 0; i < labels.length; i++) {
            Label lbl = labels[i];
            if (i < opciones.size()) {
                Opcion op = opciones.get(i);
                lbl.setText(op.text);
                lbl.setUserData(op.correct);
                lbl.setVisible(true);
                lbl.setStyle("-fx-padding:15; -fx-border-width:3; -fx-border-color:transparent; -fx-background-color: #f0f0f0; -fx-font-size: 20px;");
            } else {
                lbl.setVisible(false);
                lbl.setText("");
                lbl.setUserData(false);
            }
        }

        resetTimer();

        btnAnterior.setDisable(indiceActual == 0);
        btnSiguiente.setDisable(false);

        actualizarContadorPregunta();
    }

    private void clearStyles() {
        for (Label lbl : List.of(lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4)) {
            lbl.setStyle("-fx-padding:15; -fx-border-width:3; -fx-border-color:transparent; -fx-background-color: #f0f0f0; -fx-font-size: 20px;");
        }
    }

    @FXML
    private void handleOpcion(MouseEvent event) {
        if (timer == null || !timer.getStatus().equals(Timeline.Status.RUNNING)) {
            return; // no responder si el timer ya terminó
        }

        Label clicked = (Label) event.getSource();
        boolean esCorrecta = Boolean.TRUE.equals(clicked.getUserData());

        timer.stop();
        deshabilitarOpciones(true);

        if (esCorrecta) {
            clicked.setStyle("-fx-background-color: #00ff00; -fx-padding:15; -fx-border-width:3; -fx-border-color: #009900; -fx-font-size: 20px;");
            musicManager.playRandomSoundWin();
            saveAttempt(true);
        } else {
            clicked.setStyle("-fx-background-color: #ff0000; -fx-padding:15; -fx-border-width:3; -fx-border-color: #990000; -fx-font-size: 20px;");
            musicManager.playRandomSoundfail();
            saveAttempt(false);
            highlightCorrect();
        }

        hboxNav.setVisible(true);
    }

    private void highlightCorrect() {
        for (Label lbl : List.of(lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4)) {
            if (Boolean.TRUE.equals(lbl.getUserData())) {
                lbl.setStyle("-fx-background-color: #00cc00; -fx-padding:15; -fx-border-width:3; -fx-border-color: #006600; -fx-font-size: 20px;");
            }
        }
    }

    private void deshabilitarOpciones(boolean deshabilitar) {
        for (Label lbl : List.of(lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4)) {
            lbl.setDisable(deshabilitar);
        }
    }

    @FXML
    private void handleAnterior() {
        if (indiceActual > 0) {
            indiceActual--;
            mostrarPregunta();
        }
    }

    @FXML
    private void handleSiguiente() {
        if (indiceActual < listaPreguntas.size() - 1) {
            indiceActual++;
            mostrarPregunta();
        } else {
            // Terminar test o volver a menú principal
            terminarTest();
        }
    }

    private void saveAttempt(boolean acertada) {
        if (listaPreguntas.isEmpty() || indiceActual < 0 || indiceActual >= listaPreguntas.size()) return;

        Pregunta p = listaPreguntas.get(indiceActual);
        Usuarios u = usuarioDao.currentUser();
        if (u != null) {
            new IEstadoUsuarioImpl().save(new EstadoUsuario(u, p, acertada));
            if (acertada) usuarioDao.incrementAcertadas(u.getId());
            else usuarioDao.incrementErroneas(u.getId());
        }
    }

    private void terminarTest() {
        timer.stop();
        musicManager.stopAll();

        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/org/example/discerial/vistas/VistaMenu.fxml"));
            Parent root = loader.load();
            rootPane.getScene().setRoot(root);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
