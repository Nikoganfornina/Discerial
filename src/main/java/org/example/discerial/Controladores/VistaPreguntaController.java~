package org.example.discerial.Controladores;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.util.Duration;
import org.example.discerial.DAO.IEstadoUsuarioImpl;
import org.example.discerial.DAO.IPreguntaImpl;
import org.example.discerial.DAO.IusuariosImpl;
import org.example.discerial.Util.MusicManager;
import org.example.discerial.entities.EstadoUsuario;
import org.example.discerial.entities.Pregunta;
import org.example.discerial.entities.Usuarios;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class VistaPreguntaController {

    @FXML private AnchorPane rootPane; // AnchorPane raíz
    @FXML private Label lblCategoria, lblPregunta, lblTimer;
    @FXML private ImageView imgPregunta;
    @FXML private Label lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4;
    @FXML private VBox vboxOpciones;
    @FXML private HBox hboxNav;
    @FXML private Button btnAnterior, btnSiguiente;

    private List<Pregunta> listaPreguntas;
    private int indiceActual = 0;

    private Timeline timer;
    private int timeRemaining = 20;

    private final IusuariosImpl usuarioDao = new IusuariosImpl();
    private Usuarios usuarioActual;

    // --- VARIABLES PARA VIDEO ---
    private MediaPlayer goPlayer;
    private MediaView goMediaView;

    // Instancia de MusicManager
    private final MusicManager musicManager = MusicManager.getInstance();

    @FXML
    public void initialize() {
        usuarioActual = usuarioDao.currentUser();

        // Empieza la música ambiente al iniciar
        musicManager.playAmbientMusic();

        mostrarCuentaAtras();
        setupTimer();

        listaPreguntas = new IPreguntaImpl().findAll();
        if (!listaPreguntas.isEmpty()) {
            indiceActual = 0;
            mostrarPregunta();
        }
        hboxNav.setVisible(false); // Navegación oculta hasta que responda o tiempo acabe
    }

    public void mostrarCuentaAtras() {
        try {
            Media media = new Media(getClass().getResource("/Go.mp4").toExternalForm());
            goPlayer = new MediaPlayer(media);
            goMediaView = new MediaView(goPlayer);

            // Ajustar tamaño para que ocupe todo el AnchorPane
            goMediaView.setFitWidth(rootPane.getWidth());
            goMediaView.setFitHeight(rootPane.getHeight());
            goMediaView.setPreserveRatio(false);

            // Añadir MediaView al AnchorPane root
            rootPane.getChildren().add(goMediaView);
            goMediaView.toFront();

            // Actualizar tamaño dinámicamente si cambia el tamaño del AnchorPane
            rootPane.widthProperty().addListener((obs, oldVal, newVal) -> goMediaView.setFitWidth(newVal.doubleValue()));
            rootPane.heightProperty().addListener((obs, oldVal, newVal) -> goMediaView.setFitHeight(newVal.doubleValue()));

            // Parar música ambiente durante la cuenta atrás
            musicManager.stopAll();

            goPlayer.setOnEndOfMedia(() -> {
                goPlayer.stop();
                goPlayer.dispose();
                rootPane.getChildren().remove(goMediaView);
                // Al terminar el video, inicia la música de acción
                musicManager.playActionMusic();
                empezarJuegoDespuesVideo();
            });

            goPlayer.setOnError(() -> {
                System.err.println("Error al reproducir Go.mp4: " + goPlayer.getError());
                rootPane.getChildren().remove(goMediaView);
                musicManager.playActionMusic();
                empezarJuegoDespuesVideo();
            });

            goPlayer.setRate(1.5); // velocidad 1.5x
            goPlayer.play();

        } catch (Exception e) {
            System.err.println("Error al cargar video Go.mp4: " + e.getMessage());
            musicManager.playActionMusic();
            empezarJuegoDespuesVideo();
        }
    }

    private void empezarJuegoDespuesVideo() {
        mostrarPregunta();
    }

    public void initData(int categoria_id) {
        listaPreguntas = new IPreguntaImpl().findByCategoria(categoria_id);
        indiceActual = 0;
        mostrarPregunta();
    }

    private void setupTimer() {
        timer = new Timeline(new KeyFrame(Duration.seconds(1), e -> {
            timeRemaining--;
            lblTimer.setText("Tiempo: " + timeRemaining + "s");
            if (timeRemaining <= 0) {
                timer.stop();
                saveAttempt(false);
                highlightCorrect();
                hboxNav.setVisible(true);
                deshabilitarOpciones(true);
            }
        }));
        timer.setCycleCount(Timeline.INDEFINITE);
    }

    private void resetTimer() {
        timer.stop();
        timeRemaining = 20;
        lblTimer.setText("Tiempo: " + timeRemaining + "s");
        timer.playFromStart();
    }

    private void mostrarPregunta() {
        if (listaPreguntas.isEmpty() || indiceActual < 0 || indiceActual >= listaPreguntas.size()) return;

        hboxNav.setVisible(false);
        deshabilitarOpciones(false);
        clearStyles();

        Pregunta p = listaPreguntas.get(indiceActual);

        lblCategoria.setText("Categoría: " + p.getCategoria().getNombre());
        lblPregunta.setText(p.getPregunta());

        if (p.getImagen() != null && !p.getImagen().isBlank()) {
            try {
                imgPregunta.setImage(new Image(p.getImagen()));
                imgPregunta.setVisible(true);
            } catch (Exception e) {
                imgPregunta.setVisible(false);
            }
        } else {
            imgPregunta.setVisible(false);
        }

        class Opcion {
            String text;
            boolean correct;
            Opcion(String text, boolean correct) { this.text = text; this.correct = correct; }
        }

        List<Opcion> opciones = List.of(
                new Opcion(p.getRespuestaCorrecta(), true),
                new Opcion(p.getRespuesta2(), false),
                new Opcion(p.getRespuesta3(), false),
                new Opcion(p.getRespuesta4(), false)
        ).stream().filter(o -> o.text != null && !o.text.isBlank()).collect(Collectors.toList());

        Collections.shuffle(opciones);

        Label[] labels = {lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4};
        for (int i = 0; i < labels.length; i++) {
            Label lbl = labels[i];
            if (i < opciones.size()) {
                Opcion op = opciones.get(i);
                lbl.setText(op.text);
                lbl.setUserData(op.correct);
                lbl.setVisible(true);
                lbl.setStyle("-fx-padding:10; -fx-border-width:2; -fx-border-color:transparent;");
            } else {
                lbl.setVisible(false);
                lbl.setText("");
                lbl.setUserData(false);
            }
        }

        resetTimer();

        btnAnterior.setDisable(indiceActual == 0);
        btnSiguiente.setDisable(indiceActual == listaPreguntas.size() - 1);
    }

    private void clearStyles() {
        for (Label lbl : List.of(lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4))
            lbl.setStyle("-fx-padding:10; -fx-border-width:2; -fx-border-color:transparent;");
    }

    private void highlightCorrect() {
        for (Label lbl : List.of(lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4)) {
            if (Boolean.TRUE.equals(lbl.getUserData())) {
                lbl.setStyle("-fx-padding:10; -fx-border-width:3; -fx-border-color:green;");
            }
        }
    }

    private void deshabilitarOpciones(boolean deshabilitar) {
        for (Label lbl : List.of(lblOpcion1, lblOpcion2, lblOpcion3, lblOpcion4)) {
            lbl.setDisable(deshabilitar);
        }
    }

    @FXML
    private void handleAnterior() {
        timer.stop();
        if (indiceActual > 0) {
            indiceActual--;
            mostrarPregunta();
        }
    }

    @FXML
    private void handleSiguiente() {
        timer.stop();
        if (indiceActual < listaPreguntas.size() - 1) {
            indiceActual++;
            mostrarPregunta();
        }
    }

    @FXML
    private void handleOpcion(MouseEvent e) {
        timer.stop();
        Label clicked = (Label) e.getSource();

        boolean acertada = Boolean.TRUE.equals(clicked.getUserData());
        if (!acertada) {
            clicked.setStyle("-fx-padding:10; -fx-border-width:3; -fx-border-color:red;");
        }
        highlightCorrect();

        saveAttempt(acertada);
        hboxNav.setVisible(true);
        deshabilitarOpciones(true);
    }

    private void saveAttempt(boolean acertada) {
        if (listaPreguntas.isEmpty() || indiceActual < 0 || indiceActual >= listaPreguntas.size()) return;

        Pregunta p = listaPreguntas.get(indiceActual);
        Usuarios u = usuarioDao.currentUser();
        if (u != null) {
            new IEstadoUsuarioImpl().save(new EstadoUsuario(u, p, acertada));
            if (acertada) usuarioDao.incrementAcertadas(u.getId());
            else usuarioDao.incrementErroneas(u.getId());
        }
    }
}
